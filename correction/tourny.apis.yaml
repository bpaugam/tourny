openapi: 3.0.0
info:
  title: Tourny APIs
  description: API documentation for all APIs regarding the Tourny app.
  version: 0.0.1
  contact:
    email: bpaugam@lucca.fr
tags:
  - name: Players
    description: 'The users of the application'
  - name: 'Tournaments'
    description: 'The actual tournaments managed through the application'
servers:
  - url: 'http://127.0.0.1:4010'
    description: prism mock server
paths:
  /api/players:
    get:
      operationId: getPlayers
      description: Used to retrieve a sorted and paginated list of **players**. Max items per page is 100. Players are sorted by their last name (ascending) by default. The search parameter can be used to filter out players based on their first name and last names.
      tags:
        - Players
      parameters:
        - in: query
          name: search
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            example:
              - 'John,Doe'
          description: Find a player by name.
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - lastName
              - '-lastName'
              - firstName
              - '-firstName'
        - in: header
          name: Range
          schema:
            type: string
            format: 'items={start}-{end}'
            default: items=0-9
          required: true
          description: Paging parameter. Takes two coma-separated arguments.
      responses:
        '206':
          description: Partial Content
          headers:
            Content-Range:
              description: 'items={start}-{end}/{total}'
              schema:
                type: string
                example: items=0-9/200
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: schemas/index.yaml#/Player
              examples:
                example-1:
                  value:
                    - id: 0
                      firstName: string
                      lastName: string
                      pictureHref: 'http://example.com'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal error
      summary: Get a list of players
      security:
        - Authorization header: []
    post:
      operationId: postPlayer
      description: Used to create a new player in the application. Only `firstName` and `lastName` are required.
      tags:
        - Players
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/index.yaml#/Player
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: schemas/index.yaml#/Player
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal error
      summary: Create a new player
  '/api/players/{playerId}':
    get:
      operationId: getPlayer
      description: Retrieve a single player
      tags:
        - Players
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: schemas/index.yaml#/Player
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal error
      summary: Get a single player
    parameters: []
  /api/tournaments:
    $ref: paths/tournaments.yaml#/methods
  '/api/tournaments/{tournamentId}':
    $ref: paths/tournament.yaml#/methods
  '/api/tournaments/{tournamentId}/launch':
    $ref: paths/tournament-launch.yaml#/methods
  '/api/tournaments/{tournamentId}/termination':
    $ref: paths/tournament-termination.yaml#/methods
  '/api/tournaments/{tournamentId}/teams':
    $ref: paths/tournament-teams.yaml#/methods
  '/api/tournaments/{tournamentId}/teams/{teamId}':
    $ref: paths/tournament-team.yaml#/methods
  '/api/tournaments/{tournamentId}/teams/{teamId}/players':
    $ref: paths/tournament-team-players.yaml#/methods
  '/api/tournaments/{tournamentId}/teams/{teamId}/players/{playerId}':
    $ref: paths/tournament-team-player.yaml#/methods
  '/api/tournaments/{tournamentId}/matches':
    $ref: paths/tournament-matches.yaml#/methods
  '/api/tournaments/{tournamentId}/matches/{matchId}':
    $ref: paths/tournament-match.yaml#/methods
  '/api/tournaments/{tournamentId}/matches/{matchId}/teams':
    $ref: paths/tournament-match-teams.yaml#/methods
  '/api/tournaments/{tournamentId}/matches/{matchId}/games':
    $ref: paths/tournament-match-games.yaml#/methods
  '/api/tournaments/{tournamentId}/matches/{matchId}/winner/{teamId}':
    $ref: paths/tournament-match-winner.yaml#/methods
components:
  schemas:
    $ref: schemas/index.yaml
  securitySchemes:
    Authorization header:
      name: Authorization
      type: apiKey
      in: header
      description: 'When authenticating with a user token: `user=xxxxxx`. When using an application token: `application=xxxxxx`. Where `xxxxxx` is the token value.'
security:
  - Authorization header: []
